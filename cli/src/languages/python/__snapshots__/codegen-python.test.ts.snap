// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`python codegen cache can generate also with model 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


@dataclass
class User(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.adminId = MemorixCacheItemNoKey[typing.Optional[str]](
            api=api,
            id=\\"adminId\\",
            payload_class=typing.Optional[str],
        )
        self.user = MemorixCacheItem[str, \\"User\\"](
            api=api,
            id=\\"user\\",
            payload_class=User,
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with inline object type 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


@dataclass
class CacheUserPayload(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.user = MemorixCacheItem[int, typing.Optional[\\"CacheUserPayload\\"]](
            api=api,
            id=\\"user\\",
            payload_class=typing.Optional[CacheUserPayload],
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with inline types 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.user = MemorixCacheItem[int, str](
            api=api,
            id=\\"user\\",
            payload_class=str,
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with inline types and convert to CamelCase 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


@dataclass
class CacheUserByNumberPayload(object):
    name: str
    age: int


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.user_by_number = MemorixCacheItem[int, \\"CacheUserByNumberPayload\\"](
            api=api,
            id=\\"user_by_number\\",
            payload_class=CacheUserByNumberPayload,
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with no key 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


@dataclass
class CacheUserPayload(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.user = MemorixCacheItemNoKey[typing.Optional[\\"CacheUserPayload\\"]](
            api=api,
            id=\\"user\\",
            payload_class=typing.Optional[CacheUserPayload],
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can have options 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.user = MemorixCacheItem[int, str](
            api=api,
            id=\\"user\\",
            payload_class=str,
            options=MemorixCacheItem.Options(
                expire=MemorixCacheItem.Options.Expire(
                    value=5,
                    extend_on_get=True,
                ),
            ),
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen config can be null 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
)


class MemorixApi(MemorixBaseApi.with_global_data(  # type: ignore
    data=MemorixBaseApi.BaseApiWithGlobalData(
        default_options=MemorixBaseApi.BaseApiWithGlobalData.DefaultOptions(
            cache=MemorixCacheItem.Options(
                expire=None,
            ),
        ),
    ),
)):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)"
`;

exports[`python codegen config can generate 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
)


class MemorixApi(MemorixBaseApi.with_global_data(  # type: ignore
    data=MemorixBaseApi.BaseApiWithGlobalData(
        default_options=MemorixBaseApi.BaseApiWithGlobalData.DefaultOptions(
            cache=MemorixCacheItem.Options(
                expire=MemorixCacheItem.Options.Expire(
                    value=5,
                    extend_on_get=True,
                ),
            ),
            task=MemorixTaskItem.Options(
                take_newest=True,
            ),
        ),
    ),
)):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)"
`;

exports[`python codegen enum can generate 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from enum import Enum
from memorix_client_redis import (
,
)


class Animals(str, Enum):
    dog = \\"dog\\"
    cat = \\"cat\\"
    person = \\"person\\""
`;

exports[`python codegen model can generate from 2 models 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
,
)


@dataclass
class User1(object):
    id: int


@dataclass
class User2(object):
    name: str
    age: typing.Optional[int]"
`;

exports[`python codegen model can generate from model 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
,
)


@dataclass
class User(object):
    id: int
    name: str
    age: typing.Optional[float]"
`;

exports[`python codegen model can generate from model with array 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
,
)


@dataclass
class UserChildren(object):
    id: int
    name: typing.Optional[str]


@dataclass
class User(object):
    id: int
    names: typing.List[str]
    children: typing.Optional[typing.List[typing.Optional[\\"UserChildren\\"]]]"
`;

exports[`python codegen model can generate from model within model 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
,
)


@dataclass
class UserPapa(object):
    name: typing.Optional[str]


@dataclass
class User(object):
    id: int
    papa: \\"UserPapa\\""
`;

exports[`python codegen model can generate from model within model within a model 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
,
)


@dataclass
class UserPapaMama(object):
    sick: bool


@dataclass
class UserPapa(object):
    name: typing.Optional[str]
    mama: typing.Optional[\\"UserPapaMama\\"]
    age: int


@dataclass
class User(object):
    id: int
    papa: \\"UserPapa\\""
`;

exports[`python codegen namespace can generate 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixNamespace,
    MemorixBaseCacheApi,
    MemorixCacheItem,
    MemorixCacheItemNoKey,
)


class MemorixUserCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.bio = MemorixCacheItemNoKey[str](
            api=api,
            id=\\"bio\\",
            payload_class=str,
        )


class MemorixUserNamespace(MemorixNamespace.with_data(  # type: ignore
    data=MemorixNamespace.NamespaceApiWithData(
        name=\\"user\\",
        default_options=MemorixBaseApi.BaseApiWithGlobalData.DefaultOptions(
            cache=MemorixCacheItem.Options(
                expire=MemorixCacheItem.Options.Expire(
                    value=5,
                ),
            ),
        ),
    ),
)):
    def __init__(
        self,
        api: MemorixBaseApi,
    ) -> None:
        super().__init__(connection=api._connection)

        self.cache = MemorixUserCacheApi(self)


class MemorixCacheApi(MemorixBaseCacheApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.favoriteUser = MemorixCacheItemNoKey[str](
            api=api,
            id=\\"favoriteUser\\",
            payload_class=str,
        )


class MemorixApi(MemorixBaseApi.with_global_data(  # type: ignore
    data=MemorixBaseApi.BaseApiWithGlobalData(
        default_options=MemorixBaseApi.BaseApiWithGlobalData.DefaultOptions(
            cache=MemorixCacheItem.Options(
                expire=MemorixCacheItem.Options.Expire(
                    value=6,
                ),
            ),
        ),
    ),
)):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.user = MemorixUserNamespace(self)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen pubsub can generate with inline types 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBasePubSubApi,
    MemorixPubSubItem,
    MemorixPubSubItemNoKey,
)


class MemorixPubSubApi(MemorixBasePubSubApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.message = MemorixPubSubItem[int, str](
            api=api,
            id=\\"message\\",
            payload_class=str,
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.pubsub = MemorixPubSubApi(self)"
`;

exports[`python codegen task can generate with inline types 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseTaskApi,
    MemorixTaskItem,
    MemorixTaskItemNoKey,
    MemorixTaskItemNoReturns,
    MemorixTaskItemNoKeyNoReturns,
)


class MemorixTaskApi(MemorixBaseTaskApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.doIt = MemorixTaskItem[int, str, bool](
            api=api,
            id=\\"doIt\\",
            payload_class=str,
            returns_class=bool,
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.task = MemorixTaskApi(self)"
`;

exports[`python codegen task can have options 1`] = `
"# flake8: noqa
import typing

if typing.TYPE_CHECKING:
    from dataclasses import dataclass
else:
    from memorix_client_redis import dataclass

from memorix_client_redis import (
    MemorixBaseApi,
    MemorixBaseTaskApi,
    MemorixTaskItem,
    MemorixTaskItemNoKey,
    MemorixTaskItemNoReturns,
    MemorixTaskItemNoKeyNoReturns,
)


class MemorixTaskApi(MemorixBaseTaskApi):
    def __init__(self, api: MemorixBaseApi) -> None:
        super().__init__(api=api)

        self.doIt = MemorixTaskItem[int, str, bool](
            api=api,
            id=\\"doIt\\",
            payload_class=str,
            returns_class=bool,
            options=MemorixTaskItem.Options(
                take_newest=True,
            ),
        )


class MemorixApi(MemorixBaseApi):
    def __init__(
        self,
        redis_url: str,
    ) -> None:
        super().__init__(redis_url=redis_url)

        self.task = MemorixTaskApi(self)"
`;
