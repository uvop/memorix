// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`python codegen cache can generate also with model 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientCacheApi,
    MemorixClientCacheApiItem,
    MemorixClientCacheApiItemNoKey,
    MemorixClientCacheSetOptions as _MemorixClientCacheSetOptions,
    MemorixClientCacheSetOptionsExpire as _MemorixClientCacheSetOptionsExpire,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults
MemorixClientCacheSetOptions = _MemorixClientCacheSetOptions
MemorixClientCacheSetOptionsExpire = _MemorixClientCacheSetOptionsExpire


@dataclass
class User(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixClientCacheApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.adminId = MemorixClientCacheApiItemNoKey[typing.Optional[str]](
            api=self._api,
            id=\\"adminId\\",
            payload_class=typing.Optional[str],
        )
        self.user = MemorixClientCacheApiItem[str, User](
            api=self._api,
            id=\\"user\\",
            payload_class=User,
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with inline object type 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientCacheApi,
    MemorixClientCacheApiItem,
    MemorixClientCacheApiItemNoKey,
    MemorixClientCacheSetOptions as _MemorixClientCacheSetOptions,
    MemorixClientCacheSetOptionsExpire as _MemorixClientCacheSetOptionsExpire,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults
MemorixClientCacheSetOptions = _MemorixClientCacheSetOptions
MemorixClientCacheSetOptionsExpire = _MemorixClientCacheSetOptionsExpire


@dataclass
class CacheUserPayload(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixClientCacheApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.user = MemorixClientCacheApiItem[int, typing.Optional[CacheUserPayload]](
            api=self._api,
            id=\\"user\\",
            payload_class=typing.Optional[CacheUserPayload],
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with inline types 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientCacheApi,
    MemorixClientCacheApiItem,
    MemorixClientCacheApiItemNoKey,
    MemorixClientCacheSetOptions as _MemorixClientCacheSetOptions,
    MemorixClientCacheSetOptionsExpire as _MemorixClientCacheSetOptionsExpire,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults
MemorixClientCacheSetOptions = _MemorixClientCacheSetOptions
MemorixClientCacheSetOptionsExpire = _MemorixClientCacheSetOptionsExpire


class MemorixCacheApi(MemorixClientCacheApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.user = MemorixClientCacheApiItem[int, str](
            api=self._api,
            id=\\"user\\",
            payload_class=str,
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen cache can generate with no key 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientCacheApi,
    MemorixClientCacheApiItem,
    MemorixClientCacheApiItemNoKey,
    MemorixClientCacheSetOptions as _MemorixClientCacheSetOptions,
    MemorixClientCacheSetOptionsExpire as _MemorixClientCacheSetOptionsExpire,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults
MemorixClientCacheSetOptions = _MemorixClientCacheSetOptions
MemorixClientCacheSetOptionsExpire = _MemorixClientCacheSetOptionsExpire


@dataclass
class CacheUserPayload(object):
    name: str
    age: typing.Optional[int]


class MemorixCacheApi(MemorixClientCacheApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.user = MemorixClientCacheApiItemNoKey[typing.Optional[CacheUserPayload]](
            api=self._api,
            id=\\"user\\",
            payload_class=typing.Optional[CacheUserPayload],
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.cache = MemorixCacheApi(self)"
`;

exports[`python codegen enum can generate 1`] = `
"import typing
from enum import Enum
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





class Animals(str, Enum):
    dog = \\"dog\\"
    cat = \\"cat\\"
    person = \\"person\\""
`;

exports[`python codegen model can generate from 2 models 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





@dataclass
class User1(object):
    id: int


@dataclass
class User2(object):
    name: str
    age: typing.Optional[int]"
`;

exports[`python codegen model can generate from model 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





@dataclass
class User(object):
    id: int
    name: str
    age: typing.Optional[float]"
`;

exports[`python codegen model can generate from model with array 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





@dataclass
class UserChildren(object):
    id: int
    name: typing.Optional[str]


@dataclass
class User(object):
    id: int
    names: typing.List[str]
    children: typing.Optional[typing.List[typing.Optional[UserChildren]]]"
`;

exports[`python codegen model can generate from model within model 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





@dataclass
class UserPapa(object):
    name: typing.Optional[str]


@dataclass
class User(object):
    id: int
    papa: UserPapa"
`;

exports[`python codegen model can generate from model within model within a model 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
)





@dataclass
class UserPapaMama(object):
    sick: bool


@dataclass
class UserPapa(object):
    name: typing.Optional[str]
    mama: typing.Optional[UserPapaMama]
    age: int


@dataclass
class User(object):
    id: int
    papa: UserPapa"
`;

exports[`python codegen pubsub can generate with inline types 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientPubSubApi,
    MemorixClientPubSubApiItem,
    MemorixClientPubSubApiItemNoKey,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults


class MemorixPubSubApi(MemorixClientPubSubApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.message = MemorixClientPubSubApiItem[int, str](
            api=self._api,
            id=\\"message\\",
            payload_class=str,
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.pubsub = MemorixPubSubApi(self)"
`;

exports[`python codegen task can generate with inline types 1`] = `
"import typing
from memorix_client_redis import (  # noqa: F401
    dataclass,
    MemorixClientApi,
    MemorixClientApiDefaults as _MemorixClientApiDefaults,
    MemorixClientTaskApi,
    MemorixClientTaskApiItem,
    MemorixClientTaskApiItemNoKey,
    MemorixClientTaskApiItemNoReturns,
    MemorixClientTaskApiItemNoKeyNoReturns,
    MemorixClientTaskDequequeOptions as _MemorixClientTaskDequequeOptions,
)


MemorixClientApiDefaults = _MemorixClientApiDefaults
MemorixClientTaskDequequeOptions = _MemorixClientTaskDequequeOptions


class MemorixTaskApi(MemorixClientTaskApi):
    def __init__(self, api: MemorixClientApi) -> None:
        super().__init__(api=api)

        self.doIt = MemorixClientTaskApiItem[int, str, bool](
            api=self._api,
            id=\\"doIt\\",
            payload_class=str,
            returns_class=bool,
        )


class MemorixApi(MemorixClientApi):
    def __init__(
        self,
        redis_url: str,
        defaults: typing.Optional[MemorixClientApiDefaults] = None,
    ) -> None:
        super().__init__(redis_url=redis_url, defaults=defaults)

        self.task = MemorixTaskApi(self)"
`;
