// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rust codegen cache can generate also with model 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User {
    pub name: String,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub age: Option<i32>,
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub adminId: memorix_client_redis::MemorixCacheItemNoKey<Option<String>>,
    pub user: memorix_client_redis::MemorixCacheItem<String, User>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            adminId: memorix_client_redis::MemorixCacheItemNoKey::new(
                memorix_base.clone(),
                \\"adminId\\".to_string(),
                None
            ),
            user: memorix_client_redis::MemorixCacheItem::new(
                memorix_base.clone(),
                \\"user\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen cache can generate with inline object type 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct CacheUserPayload {
    pub name: String,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub age: Option<i32>,
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub user: memorix_client_redis::MemorixCacheItem<i32, Option<CacheUserPayload>>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            user: memorix_client_redis::MemorixCacheItem::new(
                memorix_base.clone(),
                \\"user\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen cache can generate with inline types 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub user: memorix_client_redis::MemorixCacheItem<i32, String>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            user: memorix_client_redis::MemorixCacheItem::new(
                memorix_base.clone(),
                \\"user\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen cache can generate with inline types and convert to CamelCase 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct CacheUserByNumberPayload {
    pub name: String,
    pub age: i32,
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub user_by_number: memorix_client_redis::MemorixCacheItem<i32, CacheUserByNumberPayload>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            user_by_number: memorix_client_redis::MemorixCacheItem::new(
                memorix_base.clone(),
                \\"user_by_number\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen cache can generate with no key 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct CacheUserPayload {
    pub name: String,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub age: Option<i32>,
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub user: memorix_client_redis::MemorixCacheItemNoKey<Option<CacheUserPayload>>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            user: memorix_client_redis::MemorixCacheItemNoKey::new(
                memorix_base.clone(),
                \\"user\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen cache can have options 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCache {
    pub user: memorix_client_redis::MemorixCacheItem<i32, String>,
}

impl MemorixCache {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            user: memorix_client_redis::MemorixCacheItem::new(
                memorix_base.clone(),
                \\"user\\".to_string(),
                Some(memorix_client_redis::MemorixOptionsCache {
                    expire: Some(memorix_client_redis::MemorixOptionsCacheExpire {
                        value: 5,
                        is_in_ms: None,
                        extend_on_get: Some(true),
                    }),
                })
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub cache: MemorixCache,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            cache: MemorixCache::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen config can be null 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {


}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            Some(memorix_client_redis::MemorixOptions {
                cache: Some(memorix_client_redis::MemorixOptionsCache {
                    expire: None,
                }),
                task: None,
            })
        ).await?;
        Ok(Self {


        })
    }
}"
`;

exports[`rust codegen config can generate 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {


}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            Some(memorix_client_redis::MemorixOptions {
                cache: Some(memorix_client_redis::MemorixOptionsCache {
                    expire: Some(memorix_client_redis::MemorixOptionsCacheExpire {
                        value: 5,
                        is_in_ms: None,
                        extend_on_get: Some(true),
                    }),
                }),
                task: Some(memorix_client_redis::MemorixOptionsTask {
                    take_newest: Some(true),
                }),
            })
        ).await?;
        Ok(Self {


        })
    }
}"
`;

exports[`rust codegen enum can generate 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[allow(non_camel_case_types, clippy::upper_case_acronyms)]
#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub enum Animals {
    dog,
    cat,
    person,
}"
`;

exports[`rust codegen model can generate from 2 models 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User1 {
    pub id: i32,
}


#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User2 {
    pub name: String,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub age: Option<i32>,
}"
`;

exports[`rust codegen model can generate from model 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User {
    pub id: i32,
    pub name: String,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub age: Option<f32>,
}"
`;

exports[`rust codegen model can generate from model with array 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct UserChildren {
    pub id: i32,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub name: Option<String>,
}


#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User {
    pub id: i32,
    pub names: Vec<String>,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub children: Option<Vec<Option<UserChildren>>>,
}"
`;

exports[`rust codegen model can generate from model within model 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct UserPapa {
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub name: Option<String>,
}


#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User {
    pub id: i32,
    pub papa: UserPapa,
}"
`;

exports[`rust codegen model can generate from model within model within a model 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct UserPapaMama {
    pub sick: bool,
}


#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct UserPapa {
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = \\"Option::is_none\\")]
    pub mama: Option<UserPapaMama>,
    pub age: i32,
}


#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct User {
    pub id: i32,
    pub papa: UserPapa,
}"
`;

exports[`rust codegen namespace can generate 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone, memorix_client_redis::Serialize, memorix_client_redis::Deserialize, PartialEq, std::fmt::Debug)]
pub struct UserCacheBioPayload {
    pub description: String,
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCacheUser {
    pub bio: memorix_client_redis::MemorixCacheItemNoKey<UserCacheBioPayload>,
}

impl MemorixCacheUser {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            bio: memorix_client_redis::MemorixCacheItemNoKey::new(
                memorix_base.clone(),
                \\"bio\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixUser {

    pub cache: MemorixCacheUser,
}

const MEMORIX_USER_NAMESPACE_NAME_TREE: &[&str] = &[\\"user\\"];

impl MemorixUser {
    pub fn new(other: memorix_client_redis::MemorixBase) -> Result<MemorixUser, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::from(
            other,
            MEMORIX_USER_NAMESPACE_NAME_TREE,
            Some(memorix_client_redis::MemorixOptions {
                cache: Some(memorix_client_redis::MemorixOptionsCache {
                    expire: Some(memorix_client_redis::MemorixOptionsCacheExpire {
                        value: 5,
                        is_in_ms: None,
                        extend_on_get: None,
                    }),
                }),
                task: None,
            })
        );
        Ok(Self {

            cache: MemorixCacheUser::new(memorix_base.clone()),
        })
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixCacheSpaceship {
    pub bio: memorix_client_redis::MemorixCacheItemNoKey<String>,
}

impl MemorixCacheSpaceship {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            bio: memorix_client_redis::MemorixCacheItemNoKey::new(
                memorix_base.clone(),
                \\"bio\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixSpaceship {

    pub cache: MemorixCacheSpaceship,
}

const MEMORIX_SPACESHIP_NAMESPACE_NAME_TREE: &[&str] = &[\\"spaceship\\"];

impl MemorixSpaceship {
    pub fn new(other: memorix_client_redis::MemorixBase) -> Result<MemorixSpaceship, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::from(
            other,
            MEMORIX_SPACESHIP_NAMESPACE_NAME_TREE,
            Some(memorix_client_redis::MemorixOptions {
                cache: Some(memorix_client_redis::MemorixOptionsCache {
                    expire: Some(memorix_client_redis::MemorixOptionsCacheExpire {
                        value: 5,
                        is_in_ms: None,
                        extend_on_get: None,
                    }),
                }),
                task: None,
            })
        );
        Ok(Self {

            cache: MemorixCacheSpaceship::new(memorix_base.clone()),
        })
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {
            pub user: MemorixUser,
            pub spaceship: MemorixSpaceship,


}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {
            user: MemorixUser::new(memorix_base.clone())?,
            spaceship: MemorixSpaceship::new(memorix_base.clone())?,


        })
    }
}"
`;

exports[`rust codegen pubsub can generate with inline types 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixPubSub {
    pub message: memorix_client_redis::MemorixPubSubItem<i32, String>,
}

impl MemorixPubSub {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            message: memorix_client_redis::MemorixPubSubItem::new(
                memorix_base.clone(),
                \\"message\\".to_string(),
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub pubsub: MemorixPubSub,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            pubsub: MemorixPubSub::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen task can generate with inline types 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixTask {
    pub doIt: memorix_client_redis::MemorixTaskItem<i32, String, bool>,
}

impl MemorixTask {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            doIt: memorix_client_redis::MemorixTaskItem::new(
                memorix_base.clone(),
                \\"doIt\\".to_string(),
                None
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub task: MemorixTask,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            task: MemorixTask::new(memorix_base.clone()),
        })
    }
}"
`;

exports[`rust codegen task can have options 1`] = `
"#![allow(dead_code)]
extern crate memorix_client_redis;

#[derive(Clone)]
#[allow(non_snake_case)]
pub struct MemorixTask {
    pub doIt: memorix_client_redis::MemorixTaskItem<i32, String, bool>,
}

impl MemorixTask {
    fn new(memorix_base: memorix_client_redis::MemorixBase) -> Self {
        Self {
            doIt: memorix_client_redis::MemorixTaskItem::new(
                memorix_base.clone(),
                \\"doIt\\".to_string(),
                Some(memorix_client_redis::MemorixOptionsTask {
                    take_newest: Some(true),
                })
            ),
        }
    }
}


#[derive(Clone)]
#[allow(non_snake_case)]
pub struct Memorix {

    pub task: MemorixTask,
}

const MEMORIX_NAMESPACE_NAME_TREE: &[&str] = &[];

impl Memorix {
    pub async fn new(redis_url: &str) -> Result<Memorix, Box<dyn std::error::Error>> {
        let memorix_base = memorix_client_redis::MemorixBase::new(
            redis_url,
            MEMORIX_NAMESPACE_NAME_TREE,
            None
        ).await?;
        Ok(Self {

            task: MemorixTask::new(memorix_base.clone()),
        })
    }
}"
`;
