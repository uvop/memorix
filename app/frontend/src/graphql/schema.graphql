schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ConnectedDevice {
  id: ID!
  language: Language!
  secondsConnected: Int!
}

enum EventType {
  GET
  SET
}

enum Language {
  TYPESCRIPT
}

type Mutation {
  echo(message: String!): Boolean!
}

type Query {
  test: Boolean!
  schema: Schema!
}

type Schema {
  models: [SchemaModel!]!
  cache: [SchemaCache!]!
  pubsub: [SchemaPubsub!]!
  task: [SchemaTask!]!
}

type SchemaCache {
  id: ID!
  name: String!
  key: SchemaValue
  payload: SchemaValue!
}

type SchemaModel {
  id: ID!
  name: String!
  value: SchemaValue!
}

type SchemaPubsub {
  id: ID!
  name: String!
  key: SchemaValue
  payload: SchemaValue!
}

type SchemaTask {
  id: ID!
  name: String!
  key: SchemaValue
  payload: SchemaValue!
  returns: SchemaValue
}

scalar SchemaValue

type Subscription {
  listenToEchoes: String!
  connectedDevices: [ConnectedDevice!]!
}
