name: Release

on:
  push:
    branches:
      - master
      - new-compiler

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag -l | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n 1 || echo "v0.0.0")
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT
          echo "Latest non rc tag is: ${latest_tag}"

      - name: Determine version bump type
        id: bump_type
        run: |
          messages=$(git log ${{ steps.get_tag.outputs.latest_tag }}..HEAD --pretty=format:"%s")

          bump_type="patch"
          while read -r line; do
            if [[ "$line" =~ ^major: ]]; then
              bump_type="major"
              break
            elif [[ "$line" =~ ^minor: ]]; then
              bump_type="minor"
              break
            fi
          done <<< "$messages"
          echo "type=$bump_type" >> $GITHUB_OUTPUT
          echo "Bump type is: ${bump_type}"

      - name: Calculate new version
        id: version
        run: |
          latest_tag="${{ steps.get_tag.outputs.latest_tag }}"
          current_version=${latest_tag#v}

          major=$(echo $current_version | cut -d. -f1)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3 | cut -d- -f1)

          case "${{ steps.bump_type.outputs.type }}" in
            major)
              new_version="$((major + 1)).0.0"
              ;;
            minor)
              new_version="${major}.$((minor + 1)).0"
              ;;
            patch)
              new_version="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          if [[ "${{ github.ref }}" == "refs/heads/new-compiler" ]]; then
            rc_num=1
            highest_rc=$(git tag -l "v${new_version}-rc*" | grep -E "^v${new_version}-rc[0-9]+$" | sort -V | tail -n 1 || echo "")
            if [[ ! -z "$highest_rc" ]]; then
              old_rc=$(echo $highest_rc | grep -o 'rc[0-9]*' | grep -o '[0-9]*')
              rc_num=$((old_rc + 1))
            fi
            new_version="${new_version}-rc${rc_num}"
          fi

          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "New version will be: ${new_version}"

      - name: Update Cargo.toml version
        run: |
          cd ./cli
          sed -i "0,/version = \".*\"/s/version = \".*\"/version = \"${{ steps.version.outputs.new_version }}\"/" Cargo.toml

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu
          override: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-multilib

      - name: Build all targets
        run: |
          cd ./cli
          cargo build --release --target x86_64-unknown-linux-gnu
          # cargo build --release --target x86_64-pc-windows-gnu

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add cli/Cargo.toml
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version.outputs.new_version }}"
          name: "Release v${{ steps.version.outputs.new_version }}"
          files: |
            cli/target/x86_64-unknown-linux-gnu/release/memorix
          draft: false
          prerelease: ${{ github.ref == 'refs/heads/new-compiler' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    needs: version-and-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "v${{ needs.version-and-release.outputs.new_version }}"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-apple-darwin, aarch64-apple-darwin
          override: true

      - name: Build macOS targets
        run: |
          cd ./cli
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.version-and-release.outputs.new_version }}"
          files: |
            cli/target/x86_64-apple-darwin/release/memorix
            cli/target/aarch64-apple-darwin/release/memorix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-homebrew:
    needs: [version-and-release, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: memorix
          homebrew-tap: uvop/homebrew-memorix
          tag-name: "v${{ needs.version-and-release.outputs.new_version }}"
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
