<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on</title><link>https://uvop.github.io/memorix/docs/concepts/</link><description>Recent content in Concepts on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://uvop.github.io/memorix/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Defining your data</title><link>https://uvop.github.io/memorix/docs/concepts/data/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://uvop.github.io/memorix/docs/concepts/data/</guid><description>In the Quick start guide we got to put a simple string value in and out of the in-memory cache, here we&amp;rsquo;ll learn how to define more complicated data structures.
All the data transported through Memorix is parsed to and from JSON format, so to support that we introduced several of ways to define your data (again, inspired by GraphQL).
Primitive #
Here are the basic primities you can use in your schema</description></item><item><title>Features</title><link>https://uvop.github.io/memorix/docs/concepts/features/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>https://uvop.github.io/memorix/docs/concepts/features/</guid><description>We&amp;rsquo;ll show the different applications you can use Memorix for, and how to do so
Cache #
Cache is the most basic use of an in-memory service, to use it simply add a line to your Cache scope in schema.memorix:
Cache { adminUser: { payload: { email: string password: string } } } And to use it in your project Javascript Python Rust await memorix.cache.adminUser.set({ email: &amp;quot;me@mail.com&amp;quot;, password: &amp;quot;Aa123456&amp;quot;, }); const adminUser = await memorix.</description></item></channel></rss>